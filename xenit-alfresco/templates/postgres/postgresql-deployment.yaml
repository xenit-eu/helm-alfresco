{{- if .Values.postgresql.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    {{- include "globalAnnotations" . | indent 4 }}
    {{- if .Values.postgresql.podAnnotations }}
    {{ toYaml .Values.postgresql.podAnnotations | nindent 4 }}
    {{- end }}
  labels:
    app: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  strategy:
    {{- if eq .Values.postgresql.strategy.type "Recreate" }}
    type: {{ .Values.postgresql.strategy.type }}
    {{- else }}
    {{ toYaml .Values.global.strategy | nindent 4 }}
    {{- end }}
  {{- if .Values.postgresql.serviceAccount }}
  serviceAccountName: {{ .Values.postgresql.serviceAccount }}
  {{- end }}
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql-container
        image: {{ .Values.postgresql.image.repository }}{{ if .Values.postgresql.image.tag }}:{{ .Values.postgresql.image.tag }}{{ end }}
        imagePullPolicy: {{ .Values.postgresql.image.pullPolicy | default "IfNotPresent" }}
        envFrom:
          - configMapRef:
              name: postgresql-configmap
          - secretRef:
              name: postgresql-secret
          - secretRef:
              name: db-secret
        ports:
          - containerPort: 5432
            protocol: TCP
        volumeMounts:
          - name: data
            mountPath: /var/lib/postgresql/data
            subPath: postgres/data
      imagePullSecrets:
        - name: privatecred
        {{- if .Values.global.imagePullSecrets}}
        {{ toYaml .Values.global.imagePullSecrets | nindent 8 }}
        {{- end }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: postgres-pvc
{{- end }}