{{- if .Values.solr.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: solr
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: solr
spec:
  {{- if .Values.general.hibernate }}
  replicas: 0
  {{- else }}
  replicas: {{ .Values.solr.replicas }}
  {{- end }}
  podManagementPolicy: {{ .Values.solr.podManagementPolicy }}
  selector:
    matchLabels:
      app: solr
  updateStrategy:
    type: {{ .Values.solr.strategy.type }}
  serviceName: solr-service
  template:
    metadata:
      labels:
        app: solr
      annotations:
        checksum/solr-config: {{ include (print $.Template.BasePath "/solr/solr-config.yaml") . | sha256sum }}
        {{- include "globalPodAnnotations" . | indent 8 }}
        {{- if .Values.solr.podAnnotations }}
        {{ toYaml .Values.solr.podAnnotations | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.solr.enforceZoneAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "topology.kubernetes.io/zone"
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: "In"
                    values:
                      - solr
      {{- end }}
      {{- if .Values.solr.serviceAccount }}
      serviceAccountName: {{ .Values.solr.serviceAccount }}
      {{- end }}
      {{- if .Values.solr.priorityClassName }}
      priorityClassName: {{ .Values.solr.priorityClassName }}
      {{- end }}
      containers:
        - name: solr-container
          image: {{ .Values.solr.image.registry }}/{{ .Values.solr.image.repository }}:{{ .Values.solr.image.tag }}
          imagePullPolicy: {{ .Values.solr.imagePullPolicy | default "IfNotPresent" }}
        {{- if .Values.solr.readinessProbe.enabled }}
          readinessProbe:
            failureThreshold: {{ .Values.solr.readinessProbe.failureThreshold }}
            httpGet:
              path: /solr/alfresco/xenit/actuators/readiness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: {{ .Values.solr.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.solr.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.solr.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.solr.readinessProbe.timeoutSeconds }}
        {{- end }}
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - find /opt/alfresco-search-services/data/index -name write.lock -delete
          envFrom:
            - configMapRef:
                name: solr-configmap
          {{- if .Values.solr.envFrom }}
          {{ toYaml .Values.solr.envFrom | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
        {{- if or (.Values.solr.resources.requests) ((.Values.solr.resources.limits)) }}
          resources:
          {{- if .Values.solr.resources.requests }}
            requests:
          {{ toYaml .Values.solr.resources.requests | nindent 14 }}
          {{- end }}
          {{- if .Values.solr.resources.limits }}
            limits:
          {{ toYaml .Values.solr.resources.limits | nindent 14 }}
          {{- end }}
        {{- end }}
        {{- if or (.Values.persistentStorage.solr.enabled) (.Values.persistentStorage.solrBackup.enabled) }}
          volumeMounts:
          {{- if .Values.persistentStorage.solr.enabled }}
            - name: data
              mountPath: /opt/alfresco-search-services/data
              subPath: solr/data
          {{- end }}
          {{- if .Values.persistentStorage.solrBackup.enabled }}
            - name: backup
              mountPath: /opt/alfresco-search-services/backup
              subPath: solr/backup
          {{- end }}
        {{- end }}
      imagePullSecrets:
        {{- if .Values.general.imagePullSecrets}}
        {{ toYaml .Values.general.imagePullSecrets | nindent 8 }}
        {{- end }}
        {{- if .Values.solr.imagePullSecrets}}
        {{ toYaml .Values.solr.imagePullSecrets | nindent 8 }}
        {{- end }}
  {{- if or (.Values.persistentStorage.solr.enabled) (.Values.persistentStorage.solrBackup.enabled)}}
  volumeClaimTemplates:
    {{- with .Values.persistentStorage.solr }}
    {{- if .enabled}}
    - metadata:
        name: data
      spec:
        {{- if eq .storageClassName "efs-storage-class" }}
        accessModes: [ "ReadWriteMany" ]
        {{- else }}
        accessModes: [ "ReadWriteOnce" ]
        {{- end }}
        {{- if ne .storageClassName "" }}
        storageClassName: {{ required "If solr is enabled you need to provide what storage class should be used for the persistency in  persistentStorage.solr.storageClassName" .storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .storage }}Gi
    {{- end }}
    {{- end }}
    {{- with .Values.persistentStorage.solrBackup }}
    {{- if .enabled}}
    - metadata:
        name: backup
      spec:
        {{- if eq .storageClassName "efs-storage-class" }}
        accessModes: [ "ReadWriteMany" ]
        {{- else }}
        accessModes: [ "ReadWriteOnce" ]
        {{- end }}
        {{- if ne .storageClassName "" }}
        storageClassName: {{ required "If solr is enabled you need to provide what storage class should be used for the persistency in  persistentStorage.solr.storageClassName" .storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .storage }}Gi
    {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
