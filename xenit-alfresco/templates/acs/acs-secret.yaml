{{- if not .Values.general.secrets.acs.selfManaged }}
apiVersion: v1
kind: Secret
metadata:
  name: acs-secret
  namespace: {{ .Release.Namespace | quote }}
data:
  {{- if .Values.acs.s3Datastore.enabled }}
  # try to get the old secret and sync-service-configmap
  # keep in mind, that a dry-run only returns an empty map
  {{- $old_acs_sec := lookup "v1" "Secret" .Release.Namespace "acs-secret" }}
  # check if the secret exists and no keys are passed
  {{- if and ($old_acs_sec) ($old_acs_sec.data) (not .Values.acs.s3Datastore.accessKey) (not .Values.acs.s3Datastore.secretKey) }}
  # if set and not passed, then use the old values
  GLOBAL_objectstorage.store.myS3ContentStore.value.accessKey: {{ index $old_acs_sec.data "GLOBAL_objectstorage.store.myS3ContentStore.value.accessKey" }}
  GLOBAL_objectstorage.store.myS3ContentStore.value.secretKey: {{ index $old_acs_sec.data "GLOBAL_objectstorage.store.myS3ContentStore.value.secretKey" }}
  {{- else }}
  GLOBAL_objectstorage.store.myS3ContentStore.value.accessKey: {{ required "Since you enabled S3 ContentStore you need to pass an accessKey and secretKey in acs.s3Datastore.accessKey/acs.s3Datastore.secretKey" .Values.acs.s3Datastore.accessKey }}
  GLOBAL_objectstorage.store.myS3ContentStore.value.secretKey: {{ required "Since you enabled S3 ContentStore you need to pass an accessKey and secretKey in acs.s3Datastore.accessKey/acs.s3Datastore.secretKey" .Values.acs.s3Datastore.secretKey }}
  {{- end }}
  {{- end }}
{{- end }}